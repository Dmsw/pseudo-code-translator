
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BI_BOOL_OP BOOL BREAK BY COLON COMMA CONST CONTINUE DIVEQUAL DIVIDE ELSE EQUALS FALSE FALSE FLOAT FLOAT_CONST_DEC FOR ID IF INT INT_CONST_DEC LBRACE LBRACKET LPAREN MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL MON_BOOL_OP NE NOT OR PERIOD PLUS PLUSEQUAL PLUSPLUS RBRACE RBRACKET RETURN RPAREN SEMI STRING STRING_CONST TIMES TIMESEQUAL TO TRUE TRUE WHILE statements  : statement statements\n                        | statement\n         for : for_header_1 chunk\n                | for_header_2 chunk\n                | for_header_3 chunk for_header_1    : FOR ID EQUALS expression TO expression\n                            | FOR ID EQUALS expression TO expression BY expression \n                         for_header_2    : FOR ID EQUALS expression SEMI boolexpre SEMI iterator\n         for_header_3    : FOR LPAREN ID EQUALS expression SEMI boolexpre SEMI iterator RPAREN\n                            | FOR LPAREN ID EQUALS expression SEMI boolexpre SEMI RPAREN\n                            | FOR LPAREN SEMI boolexpre SEMI iterator RPAREN\n                            | FOR LPAREN SEMI boolexpre SEMI RPAREN\n         while : while_condition chunk  while_condition : WHILE LPAREN boolexpre RPAREN\n                            | WHILE boolexpre if  : if_condition chunk \n                | if_condition chunk ELSE chunk if_condition    : IF LPAREN boolexpre RPAREN\n                            | IF boolexpre chunk   : LBRACE statements RBRACE statement   : assignment\n                        | if\n                        | while\n                        | for\n         assignment  : ID EQUALS expression SEMI\n                        | ID EQUALS boolexpre SEMI\n         iterator    : ID EQUALS expression\n                        | ID PLUSPLUS\n                         boolexpre   : boolexpre BI_BOOL_OP boolexpre\n                        | MON_BOOL_OP boolexpre\n                        | LPAREN boolexpre RPAREN\n                        | expression\n                        | TRUE\n                        | FALSE\n                        | INT_CONST_DEC expression  : expression PLUS expression \n                        | expression MINUS expression \n                        | expression TIMES expression \n                        | expression DIVIDE expression\n                         \n                        | INT_CONST_DEC \n                        | FLOAT_CONST_DEC \n                        | STRING_CONST\n                        | ID \n                        | LPAREN expression RPAREN \n        '
    
_lr_action_items = {'ID':([0,2,3,4,5,6,13,14,15,17,18,19,20,21,22,23,24,26,34,37,41,44,47,49,50,51,52,54,56,57,58,61,62,68,74,78,79,81,84,88,89,92,96,],[7,7,-21,-22,-23,-24,33,33,36,33,-16,7,-13,-3,-4,-5,33,33,33,55,33,33,33,33,33,33,33,33,33,-25,-26,-17,-20,33,33,33,33,87,33,33,87,33,87,]),'IF':([0,2,3,4,5,6,18,19,20,21,22,23,57,58,61,62,],[13,13,-21,-22,-23,-24,-16,13,-13,-3,-4,-5,-25,-26,-17,-20,]),'WHILE':([0,2,3,4,5,6,18,19,20,21,22,23,57,58,61,62,],[14,14,-21,-22,-23,-24,-16,14,-13,-3,-4,-5,-25,-26,-17,-20,]),'FOR':([0,2,3,4,5,6,18,19,20,21,22,23,57,58,61,62,],[15,15,-21,-22,-23,-24,-16,15,-13,-3,-4,-5,-25,-26,-17,-20,]),'$end':([1,2,3,4,5,6,16,18,20,21,22,23,57,58,61,62,],[0,-2,-21,-22,-23,-24,-1,-16,-13,-3,-4,-5,-25,-26,-17,-20,]),'RBRACE':([2,3,4,5,6,16,18,20,21,22,23,43,57,58,61,62,],[-2,-21,-22,-23,-24,-1,-16,-13,-3,-4,-5,62,-25,-26,-17,-20,]),'EQUALS':([7,36,55,87,],[17,54,74,92,]),'LBRACE':([8,9,10,11,12,25,27,28,29,30,31,32,33,35,42,48,63,64,65,66,67,69,70,71,72,76,82,86,91,93,94,95,97,99,100,],[19,19,19,19,19,-19,-32,-33,-34,-35,-41,-42,-43,-15,19,-30,-18,-44,-29,-36,-40,-37,-38,-39,-14,-31,-6,-12,-11,-28,-7,-8,-27,-10,-9,]),'LPAREN':([13,14,15,17,24,26,34,41,44,47,49,50,51,52,54,56,68,74,78,79,84,88,92,],[24,34,37,41,44,44,44,41,44,44,68,68,68,68,68,44,68,68,68,44,44,68,68,]),'MON_BOOL_OP':([13,14,17,24,26,34,41,44,47,56,79,84,],[26,26,26,26,26,26,26,26,26,26,26,26,]),'TRUE':([13,14,17,24,26,34,41,44,47,56,79,84,],[28,28,28,28,28,28,28,28,28,28,28,28,]),'FALSE':([13,14,17,24,26,34,41,44,47,56,79,84,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'INT_CONST_DEC':([13,14,17,24,26,34,41,44,47,49,50,51,52,54,56,68,74,78,79,84,88,92,],[30,30,40,30,30,30,40,30,30,67,67,67,67,67,30,67,67,67,30,30,67,67,]),'FLOAT_CONST_DEC':([13,14,17,24,26,34,41,44,47,49,50,51,52,54,56,68,74,78,79,84,88,92,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'STRING_CONST':([13,14,17,24,26,34,41,44,47,49,50,51,52,54,56,68,74,78,79,84,88,92,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'ELSE':([18,62,],[42,-20,]),'BI_BOOL_OP':([25,27,28,29,30,31,32,33,35,38,39,40,45,46,48,53,59,60,63,64,65,66,67,69,70,71,72,75,76,83,90,],[47,-32,-33,-34,-35,-41,-42,-43,47,-32,47,-35,47,-32,47,47,-32,47,-31,-44,47,-36,-40,-37,-38,-39,-31,47,-31,47,47,]),'SEMI':([27,28,29,30,31,32,33,37,38,39,40,48,64,65,66,67,69,70,71,73,75,76,80,83,90,],[-32,-33,-34,-35,-41,-42,-43,56,57,58,-35,-30,-44,-29,-36,-40,-37,-38,-39,79,81,-31,84,89,96,]),'RPAREN':([27,28,29,30,31,32,33,40,45,46,48,53,59,60,64,65,66,67,69,70,71,76,77,81,85,93,96,97,98,],[-32,-33,-34,-35,-41,-42,-43,-35,63,64,-30,72,64,76,-44,-29,-36,-40,-37,-38,-39,-31,64,86,91,-28,99,-27,100,]),'PLUS':([27,30,31,32,33,38,40,46,59,64,66,67,69,70,71,73,77,80,82,94,97,],[49,-40,-41,-42,-43,49,-40,49,49,-44,49,-40,49,49,49,49,49,49,49,49,49,]),'MINUS':([27,30,31,32,33,38,40,46,59,64,66,67,69,70,71,73,77,80,82,94,97,],[50,-40,-41,-42,-43,50,-40,50,50,-44,50,-40,50,50,50,50,50,50,50,50,50,]),'TIMES':([27,30,31,32,33,38,40,46,59,64,66,67,69,70,71,73,77,80,82,94,97,],[51,-40,-41,-42,-43,51,-40,51,51,-44,51,-40,51,51,51,51,51,51,51,51,51,]),'DIVIDE':([27,30,31,32,33,38,40,46,59,64,66,67,69,70,71,73,77,80,82,94,97,],[52,-40,-41,-42,-43,52,-40,52,52,-44,52,-40,52,52,52,52,52,52,52,52,52,]),'TO':([31,32,33,64,66,67,69,70,71,73,],[-41,-42,-43,-44,-36,-40,-37,-38,-39,78,]),'BY':([31,32,33,64,66,67,69,70,71,82,],[-41,-42,-43,-44,-36,-40,-37,-38,-39,88,]),'PLUSPLUS':([87,],[93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,2,19,],[1,16,43,]),'statement':([0,2,19,],[2,2,2,]),'assignment':([0,2,19,],[3,3,3,]),'if':([0,2,19,],[4,4,4,]),'while':([0,2,19,],[5,5,5,]),'for':([0,2,19,],[6,6,6,]),'if_condition':([0,2,19,],[8,8,8,]),'while_condition':([0,2,19,],[9,9,9,]),'for_header_1':([0,2,19,],[10,10,10,]),'for_header_2':([0,2,19,],[11,11,11,]),'for_header_3':([0,2,19,],[12,12,12,]),'chunk':([8,9,10,11,12,42,],[18,20,21,22,23,61,]),'boolexpre':([13,14,17,24,26,34,41,44,47,56,79,84,],[25,35,39,45,48,53,60,60,65,75,83,90,]),'expression':([13,14,17,24,26,34,41,44,47,49,50,51,52,54,56,68,74,78,79,84,88,92,],[27,27,38,46,27,46,59,46,27,66,69,70,71,73,27,77,80,82,27,27,94,97,]),'iterator':([81,89,96,],[85,95,98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement statements','statements',2,'p_statements','pcodeparser_1.py',18),
  ('statements -> statement','statements',1,'p_statements','pcodeparser_1.py',19),
  ('for -> for_header_1 chunk','for',2,'p_for','pcodeparser_1.py',28),
  ('for -> for_header_2 chunk','for',2,'p_for','pcodeparser_1.py',29),
  ('for -> for_header_3 chunk','for',2,'p_for','pcodeparser_1.py',30),
  ('for_header_1 -> FOR ID EQUALS expression TO expression','for_header_1',6,'p_for_header_1','pcodeparser_1.py',35),
  ('for_header_1 -> FOR ID EQUALS expression TO expression BY expression','for_header_1',8,'p_for_header_1','pcodeparser_1.py',36),
  ('for_header_2 -> FOR ID EQUALS expression SEMI boolexpre SEMI iterator','for_header_2',8,'p_for_header_2','pcodeparser_1.py',48),
  ('for_header_3 -> FOR LPAREN ID EQUALS expression SEMI boolexpre SEMI iterator RPAREN','for_header_3',10,'p_for_header_3','pcodeparser_1.py',53),
  ('for_header_3 -> FOR LPAREN ID EQUALS expression SEMI boolexpre SEMI RPAREN','for_header_3',9,'p_for_header_3','pcodeparser_1.py',54),
  ('for_header_3 -> FOR LPAREN SEMI boolexpre SEMI iterator RPAREN','for_header_3',7,'p_for_header_3','pcodeparser_1.py',55),
  ('for_header_3 -> FOR LPAREN SEMI boolexpre SEMI RPAREN','for_header_3',6,'p_for_header_3','pcodeparser_1.py',56),
  ('while -> while_condition chunk','while',2,'p_while','pcodeparser_1.py',71),
  ('while_condition -> WHILE LPAREN boolexpre RPAREN','while_condition',4,'p_while_condition','pcodeparser_1.py',75),
  ('while_condition -> WHILE boolexpre','while_condition',2,'p_while_condition','pcodeparser_1.py',76),
  ('if -> if_condition chunk','if',2,'p_if','pcodeparser_1.py',84),
  ('if -> if_condition chunk ELSE chunk','if',4,'p_if','pcodeparser_1.py',85),
  ('if_condition -> IF LPAREN boolexpre RPAREN','if_condition',4,'p_if_condition','pcodeparser_1.py',92),
  ('if_condition -> IF boolexpre','if_condition',2,'p_if_condition','pcodeparser_1.py',93),
  ('chunk -> LBRACE statements RBRACE','chunk',3,'p_chunk','pcodeparser_1.py',101),
  ('statement -> assignment','statement',1,'p_statement','pcodeparser_1.py',105),
  ('statement -> if','statement',1,'p_statement','pcodeparser_1.py',106),
  ('statement -> while','statement',1,'p_statement','pcodeparser_1.py',107),
  ('statement -> for','statement',1,'p_statement','pcodeparser_1.py',108),
  ('assignment -> ID EQUALS expression SEMI','assignment',4,'p_assignment','pcodeparser_1.py',115),
  ('assignment -> ID EQUALS boolexpre SEMI','assignment',4,'p_assignment','pcodeparser_1.py',116),
  ('iterator -> ID EQUALS expression','iterator',3,'p_iterator','pcodeparser_1.py',128),
  ('iterator -> ID PLUSPLUS','iterator',2,'p_iterator','pcodeparser_1.py',129),
  ('boolexpre -> boolexpre BI_BOOL_OP boolexpre','boolexpre',3,'p_boool_expression','pcodeparser_1.py',138),
  ('boolexpre -> MON_BOOL_OP boolexpre','boolexpre',2,'p_boool_expression','pcodeparser_1.py',139),
  ('boolexpre -> LPAREN boolexpre RPAREN','boolexpre',3,'p_boool_expression','pcodeparser_1.py',140),
  ('boolexpre -> expression','boolexpre',1,'p_boool_expression','pcodeparser_1.py',141),
  ('boolexpre -> TRUE','boolexpre',1,'p_boool_expression','pcodeparser_1.py',142),
  ('boolexpre -> FALSE','boolexpre',1,'p_boool_expression','pcodeparser_1.py',143),
  ('boolexpre -> INT_CONST_DEC','boolexpre',1,'p_boool_expression','pcodeparser_1.py',144),
  ('expression -> expression PLUS expression','expression',3,'p_expressions','pcodeparser_1.py',155),
  ('expression -> expression MINUS expression','expression',3,'p_expressions','pcodeparser_1.py',156),
  ('expression -> expression TIMES expression','expression',3,'p_expressions','pcodeparser_1.py',157),
  ('expression -> expression DIVIDE expression','expression',3,'p_expressions','pcodeparser_1.py',158),
  ('expression -> INT_CONST_DEC','expression',1,'p_expressions','pcodeparser_1.py',160),
  ('expression -> FLOAT_CONST_DEC','expression',1,'p_expressions','pcodeparser_1.py',161),
  ('expression -> STRING_CONST','expression',1,'p_expressions','pcodeparser_1.py',162),
  ('expression -> ID','expression',1,'p_expressions','pcodeparser_1.py',163),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expressions','pcodeparser_1.py',164),
]
